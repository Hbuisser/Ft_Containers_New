#include "stack.hpp"
#include <stack>
#include <string>

#define P(x) std::cout << x << std::endl
#define RED "\e[0;31m"
#define GRN "\e[0;32m"
#define NC "\e[0m"

#include "../List/list.hpp"

template <class T>
std::string verif(T elem)
{
	std::string value;

	if (elem)
		return (" | " GRN "[OK]" NC);
	else
		return (" | " RED "[K0]" NC);
}

void t_stack(void)
{
    P("-------------------------------------------------------------------------");
    P("---------------------------------STACK-----------------------------------");
    P("-------------------------------------------------------------------------");
    std::stack<std::string>	s;
    std::stack<std::string>	s2(s);
    ft::stack<std::string>	f;
    ft::stack<std::string>	f2(f);
    P("________________________________empty______________________________________");
    P("empty = " << s.empty() << verif(s.empty() == f.empty()));
    P("________________________________size_______________________________________");
    P("size = " << s.size() << verif(s.size() == f.size()) );
    P("________________________________push & top_________________________________");
    s.push("one");
    s.push("deux");
	f.push("one");
	f.push("deux");
	P("top = " << s.top() << verif(s.top() == f.top()) );
	P("empty = " << s.empty() << verif(s.empty() == f.empty()));
	P("size = " << s.size() << verif(s.size() == f.size()) );
    P("________________________________pop______________________________________");
    s.pop();
	f.pop();
	P("empty ? " << s.empty() << verif(s.empty() == f.empty()) );
	P("size = " << s.size() << verif(s.size() == f.size()) );
    P("------------------------------Overloads----------------------------------");
	P("-------------------------------------------------------------------------");
    P("__________________________________==_____________________________________");
    P("operator '==' : " << (f == f2) << verif((s == s2) == (f == f2)));
    P("__________________________________!=______________________________________");
    P("operator '!=' : " << (f != f2) << verif((s != s2) == (f != f2)));
    P("___________________________________<______________________________________");
    P("operator '<' : " << (f < f2) << verif((s < s2) == (f < f2)));
    P("__________________________________<=______________________________________");
    P("operator '<=' : " << (f <= f2) << verif((s <= s2) == (f <= f2)));
    P("___________________________________>______________________________________");
    P("operator '>' : " << (f > f2) << verif((s > s2) == (f > f2)));
    P("___________________________________>=______________________________________");
    P("operator '>=' : " << (f >= f2) << verif((s >= s2) == (f >= f2)));
}

int main()
{
    t_stack();
    return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////

// LIFO (last-in, first-out) data structure
